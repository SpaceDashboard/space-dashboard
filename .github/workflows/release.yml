name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - '**/docs/**'
      - '**/.github/**'
      - '**/examples/**'
      - '**/test/**'
      - '**/tests/**'
      - '**/__tests__/**'
      - '**/*.test.*'
      - '**/*.spec.*'
  workflow_dispatch:  # Allow manual triggering

# Default environment variables for all jobs
env:
  GIT_AUTHOR_NAME: github-actions
  GIT_AUTHOR_EMAIL: github-actions@github.com
  GIT_COMMITTER_NAME: github-actions
  GIT_COMMITTER_EMAIL: github-actions@github.com

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Find existing version bump PRs
        id: find-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: '${context.repo.owner}:changeset-release/main'
            });
            return prs.map(pr => pr.number);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close existing version bump PRs
        if: steps.find-prs.outputs.result != '[]'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumbers = JSON.parse('${{ steps.find-prs.outputs.result }}');
            for (const prNumber of prNumbers) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'Closing in favor of a new version bump PR with the latest changes.'
              });
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                state: 'closed'
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -z "$(git ls-files --exclude='**/.changeset/*.md' --ignored --others --exclude-standard | grep .changeset/)" ]; then
            echo "No changesets found"
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          else
            echo "Changesets found"
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Pull Request
        if: steps.check-changesets.outputs.has_changesets == 'true'
        id: changesets
        uses: changesets/action@v1
        with:
          version: yarn changeset:version
          commit: 'chore(release): v${VERSION}'
          title: 'chore(release): v${VERSION}'
          # Skip npm publishing since this is a private package
          publish: 'echo "Skipping npm publish for private package"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check-changesets.outputs.has_changesets == 'true' && steps.changesets.outputs.published == 'true'
        id: create_release
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          TAG="v$VERSION"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          *Automated release - see the full changelog for details.*
          
          ### How to Update
          
          \`\`\`bash
          # Update your local repository
          git fetch --tags
          git checkout $TAG
          
          # Install updated dependencies
          yarn install
          
          # Rebuild if needed
          yarn build
          \`\`\`
          EOF
          
          # Create a GitHub release
          gh release create $TAG \
            --title "Release $TAG" \
            --notes-file release_notes.md \
            --generate-notes \
            --latest \
            --verify-tag
            
          # Zip the dist directory
          zip -r dist-$VERSION.zip ./dist/*
          
          # Upload the dist directory as a release asset
          gh release upload $TAG dist-$VERSION.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
