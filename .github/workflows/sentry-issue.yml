name: Create Issue from Sentry

on:
  workflow_dispatch:
    inputs:
      sentry_id:
        description: 'Sentry Issue ID (e.g. 6390929863)'
        required: true

jobs:
  create_issue:
    name: Create Issue from Sentry Issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2

      - name: Fetch Sentry Issue
        id: sentry
        run: |
          SENTRY_API=https://sentry.io/api/0
          ISSUE_ID=${{ github.event.inputs.sentry_id }}
          AUTH_HEADER="Authorization: Bearer $SENTRY_AUTH_TOKEN"

          # Fetch Sentry Issue JSON
          ISSUE_DATA=$(curl -s -H "$AUTH_HEADER" "$SENTRY_API/issues/$ISSUE_ID/")
          LATEST_EVENT_DATA=$(curl -s -H "$AUTH_HEADER" "$SENTRY_API/issues/$ISSUE_ID/events/latest/")

          # Extract and clean fields
          TITLE=$(echo "$ISSUE_DATA" | jq -r '.title // "No Title"' | sed 's/(/\\(/g; s/)/\\)/g')
          URL=$(echo "$ISSUE_DATA" | jq -r '.permalink // "No URL"')

          # Extract stacktrace from the latest event
          STACKTRACE=$(echo "$LATEST_EVENT_DATA" | jq -r '
            .entries[]? | 
            select(.type=="exception") | 
            .data.values[]?.stacktrace.frames[]? |
            if .lineNo then
              "\(.filename): \(.function) [line: \(.lineNo)]"
            else
              "\(.filename): \(.function)"
            end
          ')
          STACKTRACE=$(echo "$STACKTRACE" | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g')

          # Fallback if no stacktrace from latest event
          if [ -z "$STACKTRACE" ]; then
            STACKTRACE=$(echo "$ISSUE_DATA" | jq -r '.metadata.value // ""')
          fi

          # Clean up stacktrace for Markdown
          if [ -n "$STACKTRACE" ]; then
            STACKTRACE=$(echo "$STACKTRACE" | sed 's/`/\\`/g; s/^ *//; s/ *$//')
          fi

          # Build body with clean formatting
          DESCRIPTION="<p><strong>Sentry Issue ID:</strong> <sentryid>$ISSUE_ID</sentryid></p><hr>"
          DESCRIPTION+="<p><strong>Sentry Issue:</strong> $TITLE</p>"
          DESCRIPTION+="<p>Link: <a href=\"$URL\" target=\"_blank\" rel=\"noopener\">$URL</a></p>"
          if [ -n "$STACKTRACE" ]; then
            DESCRIPTION+="<details><summary><strong>Stacktrace</strong></summary><pre>$STACKTRACE</pre></details>"
          fi

          # Remove excess newlines
          DESCRIPTION=$(echo "$DESCRIPTION" | sed -E ':a;N;$!ba;s/\n{2,}/\n\n/g')

          # Save to environment for the next step
          {
            echo "DESCRIPTION<<EOF"
            echo "$DESCRIPTION"
            echo "EOF"
          } >> $GITHUB_ENV
          echo "TITLE=$TITLE" >> $GITHUB_ENV
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN_WRITE }}

      - name: Create GitHub Issue
        run: |
          # Write the DESCRIPTION to a temporary file
          echo "$DESCRIPTION" > issue_body.md

          # Create the GitHub issue using the temporary file
          gh issue create \
            --title "$TITLE" \
            --body-file issue_body.md \
            --label "bug" \
            --label "sentry" \
            --assignee "AstroCaleb"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
