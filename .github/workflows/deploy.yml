name: Deploy

permissions:
  contents: read
  packages: read
  actions: write
  deployments: write

on:
  push:
    branches:
      - fix-sourcemap-upload-step
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Production
          - Staging
      version:
        description: 'Version/tag to deploy (e.g., v2.0.2) or "latest" for most recent release'
        required: false
        default: '2.1.3'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  web-deploy:
    name: Deploy ${{ github.event.inputs.version == 'latest' && 'latest' || github.event.inputs.version }} to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_PR_CREATE }}
    steps:
      - name: Set version and tag
        id: version
        run: |
          set -e  # Exit on error

          VERSION="${{ github.event.inputs.version || 'latest' }}"
          echo "Input version: $VERSION"

          if [ "$VERSION" = "latest" ]; then
            # Get the latest release tag
            echo "Fetching latest release..."
            LATEST_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name')
            VERSION="$LATEST_TAG"
            echo "Latest release: $VERSION"
          else
            # Clean up version string
            VERSION=$(echo "$VERSION" | tr -d '[:space:]')

            # Ensure version has 'v' prefix for consistency
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
              echo "Normalized version to: $VERSION"
            fi

            # Verify the release exists
            if ! gh release view "$VERSION" --json tagName >/dev/null 2>&1; then
              echo "::error::Release $VERSION not found"
              exit 1
            fi
          fi

          # Output both with and without 'v' prefix for flexibility
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT  # Without 'v' prefix
          echo "tag=$VERSION" >> $GITHUB_OUTPUT         # With 'v' prefix
          echo "Using version: $VERSION"
          echo "::notice::Preparing to deploy version: $VERSION"

      - name: Download release asset
        id: download-release
        run: |
          set -e

          VERSION="${{ github.event.inputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"
          FILE_NAME="dist-${{ steps.version.outputs.version }}.zip"

          if [ "$VERSION" = "latest" ]; then
            echo "Downloading latest release asset..."
            if gh release download --repo "${{ github.repository }}" --pattern "$FILE_NAME" --dir "." --clobber; then
              echo "Using pre-built assets from latest release"
              echo "use_prebuilt=true" >> $GITHUB_OUTPUT
              unzip -o "$FILE_NAME" -d dist-release
            else
              echo "No pre-built assets found for latest release, will build from source"
              echo "use_prebuilt=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Downloading tagged release asset: $TAG"
            if gh release download "$TAG" --repo "${{ github.repository }}" --pattern "$FILE_NAME" --dir "." --clobber; then
              echo "Using pre-built assets from tag $TAG"
              echo "use_prebuilt=true" >> $GITHUB_OUTPUT
              unzip -o "$FILE_NAME" -d dist-release
            else
              echo "No pre-built assets found for tag $TAG, will build from source"
              echo "use_prebuilt=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Checkout code
        if: steps.download-release.outputs.use_prebuilt != 'true'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          fetch-depth: 0
          ref: ${{ steps.version.outputs.tag || 'main' }}

      - name: Set up Node 20
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # 4.4.0
        with:
          node-version: lts/Iron

      - name: Get latest yarn
        if: steps.download-release.outputs.use_prebuilt != 'true'
        run: |
          corepack enable
          yarn set version berry

      - name: Install dependencies
        if: steps.download-release.outputs.use_prebuilt != 'true'
        run: yarn install --immutable

      - name: Build project (if no pre-built assets)
        if: steps.download-release.outputs.use_prebuilt != 'true'
        run: |
          yarn build
          # Create the same structure as the release zip for consistency
          mkdir -p dist-release
          cp -r dist/* dist-release/

      - name: Verify build
        run: |
          if [ -d "dist-release" ]; then
            echo "Build verified, found dist directory"
            ls -la dist-release/
          else
            echo "::error::Build output not found"
            exit 1
          fi

      - name: Show deployment info
        run: |
          echo "Deploying version: ${{ steps.version.outputs.version }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Using pre-built: ${{ steps.download-release.outputs.use_prebuilt || 'false' }}"

      - name: Create Release in Sentry
        uses: getsentry/action-release@db19a8438b9ff55beba8fbb40fdce2571e85bbd9 # 3.1.2
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: space-dashboard
          SENTRY_PROJECT: space-dashboard
        with:
          environment: ${{ github.event.inputs.environment }}
          release: ${{ steps.version.outputs.version }}
          sourcemaps: ./dist-release

      # - name: Sync files to ${{ github.event.inputs.environment }}
      #   uses: SamKirkland/FTP-Deploy-Action@8e83cea8672e3fbcbb9fdafff34debf6ae4c5f65 # 4.3.5
      #   if: github.event.inputs.environment == 'Production' || github.event.inputs.environment == 'Staging'
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     username: ${{ github.event.inputs.environment == 'Production' && secrets.PROD_FTP_USERNAME || secrets.STAGING_FTP_USERNAME }}
      #     password: ${{ github.event.inputs.environment == 'Production' && secrets.PROD_FTP_PASSWORD || secrets.STAGING_FTP_PASSWORD }}
      #     server-dir: public_html/
      #     local-dir: ./dist-release/
